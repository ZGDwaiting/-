函数问题（数的合并）
（1）通过返回值将新数c传给主函数；
#include<stdio.h>
int main()
{
    int fun(int a,int b);
    int a,b,c;
    printf("Please enter a,b:\n");
    scanf("%d %d",&a,&b);  //接收正整数a b
    c=fun(a,b);
    printf("The number c is %d",c);  //输出正整数c
    return 0;
}

int fun(int a,int b)
{
    int a1,a2,b1,b2;  //a1、a2、b1、b2分别对应c的千位、百位、十位、个位
    a1=a%10;
    a2=b%10;
    b1=a/10;
    b2=b/10;
    return (a1*1000+a2*100+b1*10+b2);
}

（2）通过引用参数将新数传给主函数；
#include <stdio.h>
int main()

{
void Fun(int x,int y,int *p);
    int a,b,c;

    scanf("%d %d",&a,&b);

    Fun(a,b,&c);

    printf("%d\n",c);

    return 0;

}
void Fun(int x,int y,int *p)
{
	int a1,a2,b1,b2;
	a1=x/10;
	a2=x%10;
	b1=y/10;
	b2=y%10;
	*p=a2*1000+b2*100+a1*10+b1;
}

（3）通过指针型参数将新数传给主函数
#include <stdio.h>
int main()

{
	int *Fun(int x,int y,int *p);
    int a,b,c;
	int *t;
    scanf("%d %d",&a,&b);

    t=Fun(a,b,&c);

    printf("%d\n",*t);
    return 0;

}
int *Fun(int x,int y,int *p)
{
	int a1,a2,b1,b2;
	a1=x/10;
	a2=x%10;
	b1=y/10;
	b2=y%10;
	*p=a2*1000+b2*100+a1*10+b1;
	return p;
}

线性表问题（猴子选大王）
链表
#include <stdio.h>
#include <stdlib.h>
 
typedef struct monkey {
    int num;
    struct monkey * next;
} monkey_t;

monkey_t *head = NULL, *tail = NULL;//head指向第一个节点，tail指向最后一个节点
 
void create(int nn) {   //猴子的个数
    int i;
    monkey_t *p = NULL, *q = NULL;  //定义两个结构体指针p和q，p指向一个新分配的节点，q指向当前最后一个节点
    
    p = (monkey_t *)malloc(sizeof (monkey_t));//分配空间   sizeof(monkey_t)计算monkey_t所需要分配的空间大小
    p->num = 1;
    p->next = NULL;
    head = p;
    q = p;
    for (i = 2; i <= nn; i++) {
        p = (monkey_t *)malloc(sizeof (monkey_t));
        p->num = i;
        p->next = NULL;
        q->next = p;
        q = p;
    }
    tail = q;
    tail->next = head;  //形成闭环，建立循环链表
}
 
int select(int mm,int first) {
    int x = 0, res;
    monkey_t *p = NULL, *q = NULL;  //p指向当前要判断的节点，q跟随在p的后面，比p慢一拍
     q = tail;
     while(first!=1) {
         q=q->next;
         first--;    
     }
     
    do {
        p = q->next; //定位p   
        x++;
        if (x % mm == 0) {
           // printf("The deleted monkey's number is No.%d\n", p->num);
            q->next = p->next;
            free(p);
            //p = NULL;
        } else {
            q = p;  //q跟进一步
        }
    } while (q != q->next); //循环直到只剩下一个节点
    //head = q;
    res = q->num;
    free(q);
    return res;
}
 
int main() {
    int m, n,f;
 
    printf("请输入一共有多少个猴子 \n");
    scanf("%d", &m);
    printf("输入一个数，数到这个数的猴子就要离开此圈 \n");
    scanf("%d", &n);
    printf("请输入从第几个猴子开始 \n");
    scanf("%d", &f);
    if(n==1&f==1){
    system("cls");
    printf("\n ☆ 猴子大王是 %d 号 ☆\n", m);  
    return 0;
    }
    else{ 
    create(m);
    system("cls");
    printf("\n ☆ 猴子大王是 %d 号 ☆\n ", select(n,f));
    return 0;
    } 
}

数组
#include <stdio.h>
#include <stdlib.h>
int getcount(int *p,int m,int n);
int main()
{
    int *p;
    int m,n,i,j,flag,temp;
    while(1){
    scanf("%d %d",&m,&n);
    p=(int *)malloc(sizeof(int)*m);
    for(i=0;i<m;i++)
        p[i]=i+1;
    printf("猴王的编号%d\n",getcount(p,m,n));
    }
    free(p);
    return 0;
}
int getcount(int *p,int m,int n)
{
    int i,temp,flag,count;
    temp=0;
    count=m;
     while(count!=1)
    {
        flag=1;             //计数器
        while(flag<n)   //查找要删除的猴子的编号
        {
            if(temp>=m)
                temp=0;
            if(p[temp]!=0)
            {
                flag++;
            }
            temp++;
        }
        if(temp>=m)
            temp=0;
        while(temp<m&&p[temp]==0)
            {
                   temp++;
                   if(temp>=m)
                       temp=0;
            }      //跳过已删除猴子的标号
        p[temp]=0;
        count-=1;    //剩下猴子的个数-1
    }
    for(i=0;i<m;i++)
    {
        if(p[i]!=0)
        {
            return p[i];
        }
    }
}

排序问题（奖学金）
#include<iostream>
#include<algorithm>
using namespace std;
struct node {
    int id;
    int chinese;
    int math;
    int english;
    int total;
}stu[300],temp;
bool cmp(node a, node b) {
    if (a.total != b.total) {
        return a.total > b.total;
    }
    else if (a.chinese != b.chinese)
    {
        return a.chinese > b.chinese;
    }
    return a.id < b.id;
}
int main()
{
    int n,i,j;
    cin >> n;
    for (i = 0; i < n; i++)
    {
        stu[i].id = (i+1);
        cin >> stu[i].chinese >> stu[i].math >> stu[i].english;
        stu[i].total = stu[i].chinese + stu[i].math + stu[i].english;
    }
    sort(stu, stu + n, cmp);
    for (i = 0; i<5; i++) {
        cout << stu[i].id << " " << stu[i].total << endl;
    }
}

字符串问题
#include<iostream>
using namespace std;
int main() {
    int r, c,x,y=0;
	int i=0,j=0;
    char grid[50][51],hrid[50][51];
    cin >> r>>c ;
    for ( i = 0; i < c; i++)
        cin >> grid[i];
	cin>>x;
	   for (i = 0; i < c; i++)
    {
        for ( j = 0; j < r; j++)
        hrid[i][j]=grid[i][j];
    }
    
	   for(y=0;y<x;y++)
	{
   for (i = 0; i < c; i++)
                
   {     for(j=0;j<r;j++)
   {           if(grid[i][j]=='X')
   {             hrid[i-1][j]='X';
                 hrid[i][j-1]='X';
				 hrid[i][j+1]='X';
                 hrid[i+1][j]='X';
			if(grid[i-1][j]=='P')
				 hrid[i-1][j]='P';
			if(grid[i][j-1]=='P')
				 hrid[i][j-1]='P';
			if(grid[i][j+1]=='P')
                 hrid[i][j+1]='P';
            if(grid[i+1][j]=='P')
				hrid[i+1][j]='P';


   }
   }
   }

   	   for (i = 0; i < c; i++)
    {
        for ( j = 0; j < r; j++)
        grid[i][j]=hrid[i][j];
    }
	}
       for (i = 0; i < c; i++)
    {
        for ( j = 0; j < r; j++)
        cout<<hrid[i][j];
		cout<<endl;
    }
    return 1;
 
}
  
  栈问题（多项式计算器）
  #include "iostream"
#include <stack>
 
using namespace std;
 
int Priority(char ch)
{
    switch(ch)
    {
        case '(':
            return 3;
        case '*':
        case '/':
            return 2;
        case '+':
        case '-':
            return 1;
        default:
            return 0;
    }
}
 
int main()
{
    stack<char> s_opt;
    stack<int> s_num;
    char opt[1024] = {0};
    int i = 0, tmp = 0, num1 = 0, num2 = 0;
 
    cout << "Please input: " << endl;
    cin >> opt;
 
    while(opt[i] != '\0' || s_opt.empty() != true)
    {
    if(opt[i] >= '0' && opt[i] <= '9')
    {
        tmp = tmp * 10 + opt[i] - '0';
        i++;
        if(opt[i] > '9' || opt[i] < '0')
        {
            s_num.push(tmp);
            tmp = 0;
 
        }    
    }
        else
        {
            if((opt[i] == ')') && (s_opt.top() == '('))
            {
                s_opt.pop();
                i++;
                continue;
            }
            
            if((s_opt.empty()) == true || (Priority(opt[i]) > Priority(s_opt.top())) ||
              (s_opt.top() == '(' && (opt[i] != ')')))
            {
                s_opt.push( opt[i]);
                i++;
                continue;
            }
    
            if( ((opt[i] == '\0') &&( s_opt.empty() != true)) || ( (opt[i] == ')') && (s_opt.top() != '(') )||
                (Priority(opt[i]) <= Priority(s_opt.top()))    )
            {
                char ch = s_opt.top();
                s_opt.pop();
                int num1,num2;
                switch(ch)
                {
                    case'+':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 + num2);
                        break;
 
                    case'-':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 - num2);
                    break;    
                    case'*':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 * num2);
                    break;    
                    case'/':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 / num2);
                    break;    
                }
            }    
        }
    }
    
    cout << s_num.top() << endl;
 
    return 0;
}

#include "iostream"
#include <stack>
 
using namespace std;
 
int Priority(char ch)
{
    switch(ch)
    {
        case '(':
            return 3;
        case '*':
        case '/':
            return 2;
        case '+':
        case '-':
            return 1;
        default:
            return 0;
    }
}
 
int main()
{
    stack<char> s_opt;
    stack<int> s_num;
    char opt[1024] = {0};
    int i = 0, tmp = 0, num1 = 0, num2 = 0;
 
    cout << "Please input: " << endl;
    cin >> opt;
 
    while(opt[i] != '\0' || s_opt.empty() != true)
    {
    if(opt[i] >= '0' && opt[i] <= '9')
    {
        tmp = tmp * 10 + opt[i] - '0';
        i++;
        if(opt[i] > '9' || opt[i] < '0')
        {
            s_num.push(tmp);
            tmp = 0;
 
        }    
    }
        else
        {
            if((opt[i] == ')') && (s_opt.top() == '('))
            {
                s_opt.pop();
                i++;
                continue;
            }
            
            if((s_opt.empty()) == true || (Priority(opt[i]) > Priority(s_opt.top())) ||
              (s_opt.top() == '(' && (opt[i] != ')')))
            {
                s_opt.push( opt[i]);
                i++;
                continue;
            }
    
            if( ((opt[i] == '\0') &&( s_opt.empty() != true)) || ( (opt[i] == ')') && (s_opt.top() != '(') )||
                (Priority(opt[i]) <= Priority(s_opt.top()))    )
            {
                char ch = s_opt.top();
                s_opt.pop();
                int num1,num2;
                switch(ch)
                {
                    case'+':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 + num2);
                        break;
 
                    case'-':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 - num2);
                    break;    
                    case'*':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 * num2);
                    break;    
                    case'/':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 / num2);
                    break;    
                }
            }    
        }
    }
    
    cout << s_num.top() << endl;
 
    return 0;
 }
 
 #include "iostream"
#include <stack>
 
using namespace std;
 
int Priority(char ch)
{
    switch(ch)
    {
        case '(':
            return 3;
        case '*':
        case '/':
            return 2;
        case '+':
        case '-':
            return 1;
        default:
            return 0;
    }
}
 
int main()
{
    stack<char> s_opt;
    stack<int> s_num;
    char opt[1024] = {0};
    int i = 0, tmp = 0, num1 = 0, num2 = 0;
 
    cout << "Please input: " << endl;
    cin >> opt;
 
    while(opt[i] != '\0' || s_opt.empty() != true)
    {
    if(opt[i] >= '0' && opt[i] <= '9')
    {
        tmp = tmp * 10 + opt[i] - '0';
        i++;
        if(opt[i] > '9' || opt[i] < '0')
        {
            s_num.push(tmp);
            tmp = 0;
 
        }    
    }
        else
        {
            if((opt[i] == ')') && (s_opt.top() == '('))
            {
                s_opt.pop();
                i++;
                continue;
            }
            
            if((s_opt.empty()) == true || (Priority(opt[i]) > Priority(s_opt.top())) ||
              (s_opt.top() == '(' && (opt[i] != ')')))
            {
                s_opt.push( opt[i]);
                i++;
                continue;
            }
    
            if( ((opt[i] == '\0') &&( s_opt.empty() != true)) || ( (opt[i] == ')') && (s_opt.top() != '(') )||
                (Priority(opt[i]) <= Priority(s_opt.top()))    )
            {
                char ch = s_opt.top();
                s_opt.pop();
                int num1,num2;
                switch(ch)
                {
                    case'+':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 + num2);
                        break;
 
                    case'-':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 - num2);
                    break;    
                    case'*':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 * num2);
                    break;    
                    case'/':
                        num1 = s_num.top();
                        s_num.pop();
                        num2 = s_num.top();
                        s_num.pop();
                        s_num.push(num1 / num2);
                    break;    
                }
            }    
        }
    }
    
    cout << s_num.top() << endl;
 
    return 0;
 }
 
 面向对象问题
 #include<iostream>

using namespace std;

class vehicle
{
      protected:
        int wheels;
        int weight;
      public:
         vehicle(int wh,int we)
         {
            wheels = wh;
            weight = we;
         }
         virtual void show()
         {
              cout<<"wheels is "<<wheels<<endl;
              cout<<"weight is "<<weight<<endl;
         }
               
};

class car : public vehicle
{
      private:
         int passenger_load ;
      public:
             
      car(int pa,int wh,int we) : vehicle(wh,we)
      {
          passenger_load = pa;
      }

      virtual void show()
      {
           cout<<"wheels is "<<wheels<<endl;
           cout<<"weight is "<<weight<<endl;
           cout<<"passenger_load is "<<passenger_load<<endl;
      }
             
};

class truck : public vehicle
{
      private:
         int passenger_load ;
         int pay_load;
      public:
             
      truck(int pa,int p_load,int wh,int we) : vehicle(wh,we)
      {
          passenger_load = pa;
          pay_load = p_load;
      }
      
      virtual void show()
      {
          cout<<"wheels is "<<wheels<<endl;
          cout<<"weight is "<<weight<<endl;
          cout<<"passenger_load is "<<passenger_load<<endl;
          cout<<"pay_load is "<<pay_load<<endl; 
      }
};            
int main()
{
    vehicle * ve = new car(10,4,1000);
    vehicle * ve2 = new truck(100,5000,6,2000);
    ve->show();
    ve2->show();
    
    delete ve;
    delete ve2;
    
    system("pause");
    return 0;
}

学生管理系统
#include <Windows.h>
#include <mysql.h>
#include <iostream>
#include <iomanip>
#pragma comment( lib, "libmysql.lib")

using namespace std;

void mysql_test();   //进入学生系统
void mysql_insert(); //新增学生信息
void mysql_display();//查看学生信息
void mysql_delete(); //删除学生信息
void mysql_modify(); //修改学生信息

MYSQL mysql;
MYSQL_RES *res;
MYSQL_ROW row;

int main()
{
	while (1)
	{
		cout << "**********1.进入学生系统**********" << endl;
		cout << "**********2.新增学生信息**********" << endl;
		cout << "**********3.查看学生信息**********" << endl;
		cout << "**********4.删除学生信息**********" << endl;
		cout << "**********5.修改学生信息**********" << endl;
		cout << "**********6.退出******************" << endl;
		int commond;
		cout << "请输入命令：";
		cin >> commond;
		switch (commond)
		{
			case 1:
			{
				system("cls"); mysql_test();    break;
			}
			case 2:
			{
				system("cls"); mysql_insert();  break;
			}
			case 3:
			{
				system("cls"); mysql_display(); break;
			}
			case 4:
			{
				system("cls"); mysql_delete();  break;
			}
			case 5:
			{
				system("cls"); mysql_modify();  break;
			}
			case 6:
			{
				mysql_close(&mysql); return 0;
			}
			default:
				cout << "请输入正确的指令\n";
		}
	}
	return 0;
}
/**********进入学生系统**********/
void mysql_test()
{
	mysql_init(&mysql);
	if (!mysql_real_connect(&mysql, "localhost", "root", "121915", "student", 3306, NULL, 0))
		cout << "进入失败，请稍后再试" << endl;
	else
		cout << "*******欢迎来到教务管理系统*******" << endl;
}
/**********新增学生信息**********/
void mysql_insert()
{
	char stuId[40];       //学号
	char name[40];      //姓名
	char age[40];       //年龄
	char major[40];     //专业
	char sex[40];       //性别
    char address[40];    //地址
	char birth[40];      //生日
	char telephone[40];  //电话
	char mail[40];       //邮箱
	char sqlstr[1024];  //缓冲区
	cout << "请依次输入学生学号、姓名、年龄、专业、性别、地址、生日、电话、邮箱，并用空格隔开：" << endl;
	cin >> stuId >> name >> age >> major >> sex >> major >> address >> birth >> telephone >> mail;

	int len = sprintf(sqlstr, "INSERT INTO stu2 (stuId,name,age,sex,major,address,birth,telephone,mail)\
							  VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s');",stuId,name,major,age,sex,address,birth,telephone,mail);
	mysql_query(&mysql, sqlstr);

	if (len < 0)
		cout << "新增数据失败\n";
	else
		cout << "新增数据成功\n";
	mysql_free_result(res);
}
/**********查看学生信息**********/
void mysql_display()
{	
	mysql_query(&mysql,"select * from stu2");
	res = mysql_store_result(&mysql);
	printf("stuId    name     age      major      sex      address         birth           telephone       mail\n");
	while (row = mysql_fetch_row(res))
	{
		cout << left << setw(9) << row[0];
		cout << left << setw(9) << row[1];
		cout << left << setw(9) << row[2];
		cout << left << setw(9) << row[3];
		cout << left << setw(9) << row[4];
		cout << left << setw(16) << row[5];
		cout << left << setw(16) << row[6];
		cout << left << setw(16) << row[7];
		cout << left << setw(16) << row[8];
		cout << endl;
		mysql_free_result(res);
	}
	
}
/**********删除学生信息**********/
void mysql_delete()
{
	char str[40];
	char sqlstr[1024];
	cout << "输入要删除的学生学号：";
	cin >> str;
	int len = sprintf(sqlstr, "delete from stu2 where stuId=%s", str);
	mysql_query(&mysql, sqlstr);

	if (len < 0)
		cout << "删除数据失败\n";
	else
		cout << "删除数据成功\n";
	mysql_free_result(res);
}
/**********修改学生信息**********/
void mysql_modify()
{
	int commond;
	char str[40];
	char str1[40];
	char sqlstr[1024];

	cout << "输入要修改的学生学号：";
	cin >> str;
	cout << "要修改的内容：1（姓名），2（年龄），3（专业），4（性别），5（地址），6（生日），7（电话），8（邮箱），9(退出）:";
	cin >> commond;
	switch (commond)
	{
		case 1:
		{
			cout << "请输入新的姓名：";
			cin >> str1;
			int len = sprintf(sqlstr,"update stu2 set name='%s' where stuId=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 2:
		{
			cout << "请输入新的年龄：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set age=%s where stuId=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
	
	case 3:
		{
			cout << "请输入新的专业：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set major='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 4:
		{
			cout << "请输入新的性别：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set sex='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 5:
		{
			cout << "请输入新的地址：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set address='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
			case 6:
		{
			cout << "请输入新的生日：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set birth='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}

		case 7:
		{
			cout << "请输入新的电话：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set telephone='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 8:
		{
			cout << "请输入新的邮箱：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set mail='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 9:
		{  
			return;
		}
		default:
			cout << "请输入正确的指令";
	}
}
