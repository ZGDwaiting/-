个人
1（1）
#include<stdio.h>
int main()
{
    int fun(int a,int b);
    int a,b,c;
    printf("Please enter a,b:\n");
    scanf("%d %d",&a,&b);  //接收正整数a b
    c=fun(a,b);
    printf("The number c is %d",c);  //输出正整数c
    return 0;
}

int fun(int a,int b)
{
    int a1,a2,b1,b2;  //a1、a2、b1、b2分别对应c的千位、百位、十位、个位
    a1=a%10;
    a2=b%10;
    b1=a/10;
    b2=b/10;
    return (a1*1000+a2*100+b1*10+b2);
}
（2）
#include <stdio.h>
int main()

{
void Fun(int x,int y,int *p);
    int a,b,c;

    scanf("%d %d",&a,&b);

    Fun(a,b,&c);

    printf("%d\n",c);

    return 0;

}
void Fun(int x,int y,int *p)
{
	int a1,a2,b1,b2;
	a1=x/10;
	a2=x%10;
	b1=y/10;
	b2=y%10;
	*p=a2*1000+b2*100+a1*10+b1;
}
（3）
#include <stdio.h>
int main()

{
	int *Fun(int x,int y,int *p);
    int a,b,c;
	int *t;
    scanf("%d %d",&a,&b);

    t=Fun(a,b,&c);

    printf("%d\n",*t);
    return 0;

}
int *Fun(int x,int y,int *p)
{
	int a1,a2,b1,b2;
	a1=x/10;
	a2=x%10;
	b1=y/10;
	b2=y%10;
	*p=a2*1000+b2*100+a1*10+b1;
	return p;
}
2.（1）链表
#include <iostream>
#include <stdio.h> 
using namespace std;
 
struct node{
	int data;
	int last;
	int next;
};
 
struct node a[1100];
 
int main(int argc, char** argv) {
	int n;
	while(scanf("%d",&n)==1)
	{
		for(int i=2;i<n;i++)
		{
			a[i].data=i;  a[i].last=i-1;  a[i].next=i+1;
		}
		a[1].data=1; a[1].last=n;   a[1].next=2;
		a[n].data=n; a[n].last=n-1; a[n].next=1;
		
		int num=1;       //记录报数次数 
		int count=1;     //记录当前猴子的序号 
		while(a[count].next!=a[count].data)
		{
			if(num%3==0)
			{
				a[a[count].last].next=a[count].next;
				a[a[count].next].last=a[count].last;
				
			}
			num++;
			count=a[count].next;
		}
		printf("%d\n",a[count].data);
	}
	
	return 0;
}
（2）数组
#include<stdio.h>
int main()
{
	int m,n,number,count=1;		//number记猴子剩余个数，count记当前报数
	int monkey[999];
	int t;						//t记数组下标
	int i;
	printf("请输入猴子个数 m 和报数 n ：");
	scanf("%d%d",&m,&n);
	number = m;
	for(i=0;i<m;i++)
		monkey[i]=i+1;
	t=0;
	while(number>1)
	{
		if(monkey[t]>0)
		{
			if(count!=n)
			{
				count++;
				t=(t+1)%m;		//t=(t+1)%m实现数组下标加1
			}
			else
			{
				monkey[t]=0;
				count=1;
				number--;
				t=(t+1)%m;
			}
		}
		else
		{
			t=(t+1)%m;
		}
	}
	for(i=0;i<m;i++)
	{
		if(monkey[i]>0)
			printf("猴子大王：%d\n",monkey[i]);
	}
	return 0;
}

3.
#include <iostream>
 
 using namespace std;
 
 int main(int argc, char *argv[])
{   
     int n,c[305]={0},m[305]={0},e[305]={0},i,j,s[305]={0},x[305]={0};
     cin>>n;
     for(i=1;i<=n;i++)
     {
         cin>>c[i];
         cin>>m[i];
         cin>>e[i];
        s[i]=c[i]+m[i]+e[i];
         x[i]=i;
         //cout<<c[i]<<" "<<m[i]<<" "<<e[i]<<" "<<s[i]<<endl;
     }
   for(i=1;i<n;i++)
     {
         for(j=i+1;j<=n;j++)
         {
             if(s[i]<s[j])
             {
                 swap(s[i],s[j]);
                 swap(c[i],c[j]);
                 swap(x[i],x[j]);
             }
            else if(s[i]==s[j])
             {
                 if(c[i]<c[j])
                 {
                     swap(s[i],s[j]);
                     swap(c[i],c[j]);
                     swap(x[i],x[j]);
                   
                 }
                 else if(c[i]==c[j])
                 {
                     if(x[i]>=x[j])
                     {
                         swap(s[i],s[j]);
                         swap(c[i],c[j]);
                        swap(x[i],x[j]);
                     }
                 }
             }
         }
         //cout<<x[i]<<" "<<s[i]<<endl;
     }
     for(i=1;i<=5;i++)
     {
         cout<<x[i]<<" "<<s[i]<<endl;
     }
    return 0;
 }
4.#include<iostream>
using namespace std;
int main() {
    int r, c,x,y=0;
	int i=0,j=0;
    char grid[50][51],hrid[50][51];
    cin >> r>>c ;
    for ( i = 0; i < c; i++)
        cin >> grid[i];
	cin>>x;
	   for (i = 0; i < c; i++)
    {
        for ( j = 0; j < r; j++)
        hrid[i][j]=grid[i][j];
    }
    
	   for(y=0;y<x;y++)
	{
   for (i = 0; i < c; i++)
   {     for(j=0;j<r;j++)
                
   {           if(grid[i][j]=='X')
   {             hrid[i-1][j]='X';
                 hrid[i][j-1]='X';
				 hrid[i][j+1]='X';
                 hrid[i+1][j]='X';
			if(grid[i-1][j]=='P')
				 hrid[i-1][j]='P';
			if(grid[i][j-1]=='P')
				 hrid[i][j-1]='P';
			if(grid[i][j+1]=='P')
                 hrid[i][j+1]='P';
            if(grid[i+1][j]=='P')
				hrid[i+1][j]='P';


   }
   }
   }

   	   for (i = 0; i < c; i++)
    {
        for ( j = 0; j < r; j++)
        grid[i][j]=hrid[i][j];
    }
	}
       for (i = 0; i < c; i++)
    {
        for ( j = 0; j < r; j++)
        cout<<hrid[i][j];
		cout<<endl;
    }
    return 1;
 
}
   ;
5.#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#include<string.h>
#define OK 1
#define ERROR 0
#define OVERFLOW -2
#define MAXSIZE 100
typedef int Status;
typedef char SElemType;
typedef struct
{
	SElemType *base;
	SElemType *top;
	int stacksize;
}SqStack;
Status InitStack(SqStack &S)//初始化
{
	S.base=(SElemType*)malloc(sizeof(SElemType)*MAXSIZE);
	if(!S.base)
	exit(OVERFLOW);
	S.top=S.base;
	S.stacksize=MAXSIZE;
	return OK;
}
Status Push(SqStack &S,SElemType e)//入栈
{
	if(S.top-S.base==S.stacksize)
	return ERROR;//栈满
	*S.top++=e;//元素e压入栈顶，栈顶指针加1;
	return OK;
 }
Status Pop(SqStack &S,SElemType &e)//出栈
{
	if(S.top==S.base)//栈空
	return ERROR;
	e=*--S.top;//栈顶指针减一，将栈顶元素赋给e;
	return OK;
}
SElemType GetTop(SqStack S)//取栈顶元素
{
	if(S.top!=S.base)//栈非空
	return *(S.top-1);//返回栈顶元素的值，栈顶指针不变
}
int In(SElemType e)//判断读入字符是否为运算符
{
	if(e=='+'||e=='-'||e=='*'||e=='/'||e=='('||e==')'||e=='#')
	    return 1;//是
	else
	    return 0; //不是
}
SElemType Precede(SElemType a,SElemType b)//比较运算符的优先级
{
	SElemType f;
	if(a=='+'||a=='-')
	{
		if(b=='+'||b=='-'||b==')'||b=='#')
		    f='>';
		else if(b=='*'||b=='/'||b=='(')
		    f='<';
	}
	else if(a=='*'||a=='/')
	{
		if(b=='+'||b=='-'||b=='*'||b=='/'||b==')'||b=='#')
		   f='>';
		else if(b=='(')
		   f='<';
	}
	else if(a=='(')
	{
		if(b=='+'||b=='-'||b=='*'||b=='/'||b=='(')
		   f='<';
		else if(b==')')
		   f='=';
	}
	else if(a==')')
	{
		if(b=='+'||b=='-'||b=='*'||b=='/'||b==')'||b=='#')
		   f='>';
       
	}
	else if(a=='#')
	{
		if(b=='+'||b=='-'||b=='*'||b=='/'||b=='(')
		   f='<';
		else if(b=='#')
		   f='=';
	}
	return f;
}
SElemType Operate(SElemType a,SElemType theta,SElemType b)//运算
{
	SElemType c;
	a=a-'0';
	b=b-'0';
	if(theta=='+')
	  c=a+b+'0';
	else if(theta=='-')
	  c=a-b+'0';
	else if(theta=='*')
	  c=a*b+'0';
	else if(theta=='/')
	  c=a/b+'0';
	return c;
}
int EvaluateExpression()
{
	SqStack OPND,OPTR;
	char ch,a,b,theta,x;
	InitStack(OPND);//寄存操作数和运算结果
	InitStack(OPTR);//寄存运算符
	Push(OPTR,'#');
	ch=getchar();
	while(ch!='#'||GetTop(OPTR)!='#')
	{
		if(!In(ch))
		{
			Push(OPND,ch);
			ch=getchar();
		}
		else
		{
			switch(Precede(GetTop(OPTR),ch))
			{
				case '<':
					Push(OPTR,ch);
				    ch=getchar();
					break;
				case '>':
					Pop(OPTR,theta);
					Pop(OPND,b);
					Pop(OPND,a);
					Push(OPND,Operate(a,theta,b));
					break;
				case '=':
					Pop(OPTR,x);
				    ch=getchar();
					break;
			}
		}
	}
	return GetTop(OPND)-'0';
}
int main()
{
	printf("请输入算术表达式,并以#结束\n");
	printf("结果是: %d\n",EvaluateExpression());
	return 0;
}
6.#include<iostream>
using namespace std;
class Vehicle
{
	public:
		Vehicle(int wl,double wh):wheels(wl),weight(wh){};
		void show()
		{
			cout<<"wheels:"<<wheels<<",weight:"<<weight<<endl;
		}
	protected:
		int wheels;
		double weight;
};
class Car:private Vehicle
{
	public:
		Car(int wl,double wh,int pl):Vehicle(wl,wh),passager_load(pl){};
		void show()
		{
			Vehicle::show();
			cout<<"passager_load:"<<passager_load<<endl;
		}
	private:
		int passager_load;
};
class Truck:private Vehicle
{
	public:
		Truck(int wl,double wh,int pl,double psl):Vehicle(wl,wh),passager_load(pl),payload(psl){};
		void show()
		{
			Vehicle::show();
			cout<<"passager_load:"<<passager_load<<endl;
			cout<<"payload:"<<payload<<endl;
		}
	private:
		int passager_load;
		double payload;
};
int main()
{
	Vehicle v1(4,200);
	v1.show();
	cout<<"===================="<<endl;
	Car c1(4,290,10);
	c1.show();
	cout<<"===================="<<endl;
	Truck t1(4,500,50,200);
	t1.show();
	return 0;
}
综合
#include <Windows.h>
#include <mysql.h>
#include <iostream>
#include <iomanip>
#pragma comment( lib, "libmysql.lib")

using namespace std;

void mysql_test();   //进入学生系统
void mysql_insert(); //新增学生信息
void mysql_display();//查看学生信息
void mysql_delete(); //删除学生信息
void mysql_modify(); //修改学生信息

MYSQL mysql;
MYSQL_RES *res;
MYSQL_ROW row;

int main()
{
	while (1)
	{
		cout << "**********1.进入学生系统**********" << endl;
		cout << "**********2.新增学生信息**********" << endl;
		cout << "**********3.查看学生信息**********" << endl;
		cout << "**********4.删除学生信息**********" << endl;
		cout << "**********5.修改学生信息**********" << endl;
		cout << "**********6.退出******************" << endl;
		int commond;
		cout << "请输入命令：";
		cin >> commond;
		switch (commond)
		{
			case 1:
			{
				system("cls"); mysql_test();    break;
			}
			case 2:
			{
				system("cls"); mysql_insert();  break;
			}
			case 3:
			{
				system("cls"); mysql_display(); break;
			}
			case 4:
			{
				system("cls"); mysql_delete();  break;
			}
			case 5:
			{
				system("cls"); mysql_modify();  break;
			}
			case 6:
			{
				mysql_close(&mysql); return 0;
			}
			default:
				cout << "请输入正确的指令\n";
		}
	}
	return 0;
}
/**********进入学生系统**********/
void mysql_test()
{
	mysql_init(&mysql);
	if (!mysql_real_connect(&mysql, "localhost", "root", "121915", "student", 3306, NULL, 0))
		cout << "进入失败，请稍后再试" << endl;
	else
		cout << "*******欢迎来到教务管理系统*******" << endl;
}
/**********新增学生信息**********/
void mysql_insert()
{
	char stuId[40];       //学号
	char name[40];      //姓名
	char age[40];       //年龄
	char major[40];     //专业
	char sex[40];       //性别
    char address[40];    //地址
	char birth[40];      //生日
	char telephone[40];  //电话
	char mail[40];       //邮箱
	char sqlstr[1024];  //缓冲区
	cout << "请依次输入学生学号、姓名、年龄、专业、性别、地址、生日、电话、邮箱，并用空格隔开：" << endl;
	cin >> stuId >> name >> age >> major >> sex >> address >> birth >> telephone >> mail;

	int len = sprintf(sqlstr, "INSERT INTO stu2 (stuId,name,age,major,sex,address,birth,telephone,mail)\
							  VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s');",stuId,name,age,major,sex,address,birth,telephone,mail);
	mysql_query(&mysql, sqlstr);

	if (len < 0)
		cout << "新增数据失败\n";
	else
		cout << "新增数据成功\n";
	mysql_free_result(res);
}
/**********查看学生信息**********/
void mysql_display()
{	
	mysql_query(&mysql,"select * from stu2");
	res = mysql_store_result(&mysql);
	printf("stuId    name     age      major      sex      address         birth           telephone       mail\n");
	while (row = mysql_fetch_row(res))
	{
		cout << left << setw(9) << row[0];
		cout << left << setw(9) << row[1];
		cout << left << setw(9) << row[2];
		cout << left << setw(9) << row[3];
		cout << left << setw(9) << row[4];
		cout << left << setw(16) << row[5];
		cout << left << setw(16) << row[6];
		cout << left << setw(16) << row[7];
		cout << left << setw(16) << row[8];
		cout << endl;
		mysql_free_result(res);
	}
	
}
/**********删除学生信息**********/
void mysql_delete()
{
	char str[40];
	char sqlstr[1024];
	cout << "输入要删除的学生学号：";
	cin >> str;
	int len = sprintf(sqlstr, "delete from stu2 where stuId=%s", str);
	mysql_query(&mysql, sqlstr);

	if (len < 0)
		cout << "删除数据失败\n";
	else
		cout << "删除数据成功\n";
	mysql_free_result(res);
}
/**********修改学生信息**********/
void mysql_modify()
{
	int commond;
	char str[40];
	char str1[40];
	char sqlstr[1024];

	cout << "输入要修改的学生学号：";
	cin >> str;
	cout << "要修改的内容：1（姓名），2（年龄），3（专业），4（性别），5（地址），6（生日），7（电话），8（邮箱），9(退出）:";
	cin >> commond;
	switch (commond)
	{
		case 1:
		{
			cout << "请输入新的姓名：";
			cin >> str1;
			int len = sprintf(sqlstr,"update stu2 set name='%s' where stuId=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 2:
		{
			cout << "请输入新的年龄：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set age=%s where stuId=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
	
	case 3:
		{
			cout << "请输入新的专业：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set major='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 4:
		{
			cout << "请输入新的性别：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set sex='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 5:
		{
			cout << "请输入新的地址：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set address='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
			case 6:
		{
			cout << "请输入新的生日：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set birth='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}

		case 7:
		{
			cout << "请输入新的电话：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set telephone='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 8:
		{
			cout << "请输入新的邮箱：";
			cin >> str1;
			int len = sprintf(sqlstr, "update stu2 set mail='%s' where stuID=%s", str1, str);
			mysql_query(&mysql, sqlstr);
			if (len < 0)
				cout << "修改数据失败\n";
			else
				cout << "修改数据成功\n";
			break;
		}
		case 9:
		{  
			return;
		}
		default:
			cout << "请输入正确的指令";
	}
}
